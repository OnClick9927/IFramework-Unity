--- @class LuaDataType Lua数据类型枚举
LuaDataType = {
    Number   = "number",
    String   = "string",
    Nil      = "nil",
    Booean   = "boolean",
    Function = "function",
    Table    = "table",
    UserData = "userdata",
    Thread   = "thread"
}
tools = {}

---判断一个值能否通过条件
---@generic V
---@param value V
---@param ... fun(a:V):boolean
---@return boolean
function tools.FitConditions(value, ...)
    local args = { ... }
    for _, func in ipairs(args) do
        local bo = func(value)
        if not bo then
            return false
        end
    end
    return true
end

string.empty = ""
function string.IsNullOrEmpty(source)
    return source == nil or source == string.empty
end

---去除头部空格
---@param  source string
---@return string
function string.TrimHead(source)
    return string.gsub(source, "^[ \t\n\r]+", string.empty)
end

--- 去除输入字符串尾部的空白字符，返回结果
---@param  source string
---@return string
function string.TrimTail(source)
    return string.gsub(source, "[ \t\n\r]+$", string.empty)
end

--- 去除输入字符串 尾部+头部 的空白字符，返回结果
---@param  source string
---@return string
function string.Trim(source)
    source = string.TrimHead(source)
    return string.TrimTail(source)
end

--- 将字符串的第一个字符转为大写，返回结果
---@param  source string
---@return string
function string.UpperFirst(source)
    return string.upper(string.sub(source, 1, 1)) .. string.sub(source, 2)
end

---用指定字符或字符串分割输入字符串，返回包含分割结果的数组
---@param source string 源字符串
---@param delimiter string 分割符
---@return string[]
function string.Split(source, delimiter)
    source    = tostring(source)
    delimiter = tostring(delimiter)
    if string.IsNullOrEmpty(delimiter) then return false end
    local pos, arr = 0, {}
    -- for each divider found
    for st, sp in function()
        return string.find(source, delimiter, pos, true)
    end do
        table.insert(arr, string.sub(source, pos, st - 1))
        pos = sp + 1
    end
    table.insert(arr, string.sub(source, pos))
    return arr
end

-- 计算 UTF8 字符串的长度，每一个中文算一个字符
-- local input = "你好World"
-- string.UTF8Length(input)
-- 输出 7
---@param  source string
---@return number
function string.UTF8Length(source)
    local len = string.len(source)
    local left = len
    local cnt = 0
    local arr = { 0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc }
    while left ~= 0 do
        local tmp = string.byte(source, -left)
        local i = #arr
        while arr[i] do
            if tmp >= arr[i] then
                left = left - i
                break
            end
            i = i - 1
        end
        cnt = cnt + 1
    end
    return cnt
end

------------------------------------------------------------------------------

---对数值进行四舍五入
---@param value number 数值
---@return number
function math.RoundToInt(value)
    return math.floor(value + 0.5)
end

---对数值进行取小数部分
---@param value number 数值
---@return number
function math.Frac(value)
    return value - math.floor(value)
end

---角度转弧度
---@param angle number 角度
---@return number
function math.AngleToRadian(angle)
    return angle * math.pi / 180
end

---弧度转角度
---@param radian number 弧度
---@return number
function math.RadianToAngle(radian)
    return radian / math.pi * 180
end

------------------------------------------------------------------------------

---检查指定的文件或目录是否存在，如果存在返回 true，否则返回 false
---@param path string 文件路径
---@return boolean
function io.Exists(path)
    local file = io.open(path, "r")
    if file then io.close(file) end
    return file ~= nil
end

---读取文件内容，返回包含文件内容的字符串，如果失败返回 nil
---@param path string 文件路径
---@return string|nil
function io.ReadText(path)
    local file = io.open(path, "r")
    if not file then return nil end
    local content = file:read("*a")
    io.close(file)
    return content
end

--- 以字符串内容写入文件，成功返回 true，失败返回 false
--- "mode 写入模式" 参数决定 io.writefile() 如何写入内容，可用的值如下：
--- -   "w+" : 覆盖文件已有内容，如果文件不存在则创建新文件
--- -   "a+" : 追加内容到文件尾部，如果文件不存在则创建文件
--- 此外，还可以在 "写入模式" 参数最后追加字符 "b" ，表示以二进制方式写入数据，这样可以避免内容写入不完整。
--- @param path string 文件路径
--- @param content string 内容
--- @param mode string 模式
function io.WriteText(path, content, mode)
    mode = mode or "w+b"
    local file = io.open(path, mode)
    if not file then return false end
    if file:write(content) == nil then return false end
    io.close(file)
    return true
end

---拆分一个路径字符串，返回组成路径的各个部分
--- local pathinfo  = io.pathinfo("/var/app/test/abc.png")
--- pathinfo.dirname  = "/var/app/test/"
--- pathinfo.filename = "abc.png"
--- pathinfo.basename = "abc"
--- pathinfo.extname  = ".png"
--- @param  path string 要分拆的路径字符串
--- @return table
function io.PathInfo(path)
    local pos = string.len(path)
    local extpos = pos + 1
    while pos > 0 do
        local b = string.byte(path, pos)
        if b == 46 then     -- 46 = char "."
            extpos = pos
        elseif b == 47 then -- 47 = char "/"
            break
        end
        pos = pos - 1
    end

    local dirname = string.sub(path, 1, pos)
    local filename = string.sub(path, pos + 1)
    extpos = extpos - pos
    local basename = string.sub(filename, 1, extpos - 1)
    local extname = string.sub(filename, extpos)
    return {
        dirname = dirname,
        filename = filename,
        basename = basename,
        extname = extname
    }
end

---返回指定文件的大小，如果失败返回 false
--- @param  path string 文件完全路径
--- @return number
function io.FileSize(path)
    local size = 0
    local file = io.open(path, "r")
    if file then
        local current = file:seek()
        size = file:seek("end")
        file:seek("set", current)
        io.close(file)
    end
    return size
end

------------------------------------------------------------------------------
--- 深拷贝一个table
---@param t table
---@return table
function table.DeepCopy(t)
    local SearchTable = {}
    local function Func(object)
        if type(object) ~= LuaDataType.Table then return object end
        local NewTable = {}
        SearchTable[object] = NewTable
        for k, v in pairs(object) do
            NewTable[Func(k)] = Func(v)
        end
        return setmetatable(NewTable, getmetatable(object))
    end

    return Func(t)
end

--- 清空一个Table
---@param t table
function table.Clear(t)
    for _, v in pairs(t) do v = nil end
end

--- 计算表格包含的字段数量
--- Lua table 的 "#" 操作只对依次排序的数值下标数组有效，table.nums() 则计算 table 中所有不为 nil 的值的个数。
---@param t table
---@return number
function table.GetCount(t)
    local count = 0
    for k, v in pairs(t) do
        count = count + 1
    end
    return count
end

--- 返回指定表格中的所有键
--- local hashtable = {a = 1, b = 2, c = 3}
--- local keys = table.GetKeys(hashtable)
--- keys = {"a", "b", "c"}
---@param hashtable table
---@return any[]
function table.GetKeys(hashtable)
    local keys = {}
    for k, v in pairs(hashtable) do
        keys[#keys + 1] = k
    end
    return keys
end

---@param hashtable table
---@param key string
---@return boolean
function table.ContainsKey(hashtable, key)
    local t = type(hashtable)
    return (t == LuaDataType.Table or t == LuaDataType.UserData) and hashtable[key] ~= nil
end

--- 返回指定表格中的所有值
--- local hashtable = {a = 1, b = 2, c = 3}
--- local values = table.GetValues(hashtable)
--- values = {1, 2, 3}
---@param hashtable table
---@return any[]
function table.GetValues(hashtable)
    local values = {}
    for k, v in pairs(hashtable) do
        values[#values + 1] = v
    end
    return values
end

--- 将来源表格中所有键及其值复制到目标表格对象中，如果存在同名键，则覆盖其值
--- local dest = {a = 1, b = 2}
--- local src  = {c = 3, d = 4}
--- table.merge(dest, src)
--- dest = {a = 1, b = 2, c = 3, d = 4}
---@param dest table
---@param src table
function table.Merge(dest, src)
    for k, v in pairs(src) do
        dest[k] = v
    end
end

--- 在目标表格的指定位置插入来源表格，如果没有指定位置则连接两个表格
--- local dest = {1, 2, 3}
--- local src  = {4, 5, 6}
--- table.Insert(dest, src)
--- dest = {1, 2, 3, 4, 5, 6}
--- dest = {1, 2, 3}
--- table.Insert(dest, src, 5)
--- dest = {1, 2, 3, nil, 4, 5, 6}
---@generic V
---@param dest V[]
---@param src V[]
---@param begin number
function table.Insert(dest, src, begin)
    local bo, begin = math.RoundToInt(begin)
    if not bo then
        begin = 0
    end
    if begin <= 0 then
        begin = #dest + 1
    end
    local len = #src
    for i = 0, len - 1 do
        dest[i + begin] = src[i + 1]
    end
end

---@param tab table
---@param value any
function table.GetKey(tab, value)
    for index, _value in pairs(tab) do
        if _value == value then
            return index
        end
    end
    return false
end

---筛选所有符合条件的数据
---@generic K
---@generic V
---@param tab table<K,V>
---@param ... fun(a:V):boolean
---@param return_dic boolean 返回值是否采用原有的key
---@return table<K,V>|V[]
function table.FindAll(tab, return_dic, ...)
    local result = {}
    for key, value in pairs(tab) do
        local bo = tools.FitConditions(value, ...)
        if bo then
            if return_dic then
                result[key] = value
            else
                table.insert(result, value)
            end
        end
    end
    return result
end

---筛选第一个符合条件的数据
---@generic K
---@generic V
---@param tab table<K,V>
---@param ... fun(a:V):boolean
---@return V
function table.Find(tab, ...)
    for key, value in pairs(tab) do
        local bo = tools.FitConditions(value, ...)
        if bo then
            return value
        end
    end
end

--- 对表格中每一个值执行一次指定的函数，并用函数返回值更新表格内容
---@generic K,V
---@param t table<K,V>
---@param func fun(key:K,Value:V):V
function table.Map(t, func)
    for k, v in pairs(t) do
        t[k] = func(k, v)
    end
end

--- 对表格中每一个值执行一次指定的函数
---@generic K,V
---@param t table<K,V>
---@param func fun(key:K,Value:V)
function table.Walk(t, func)
    for k, v in pairs(t) do
        func(k, v)
    end
end

--- 对表格中每一个值执行一次指定的函数，如果该函数返回 true，则对应的值会从表格中删除
---@generic K,V
---@param t table<K,V>
---@param func fun(key:K,value:V):boolean
function table.RemoveAll(t, func)
    for k, v in pairs(t) do
        if func(k, v) then
            t[k] = nil
        end
    end
end

---遍历表格，确保其中的值唯一
---@generic V
---@param t table
---@param bArray boolean 是否转成数组
---@return table<any,V>|V[]
function table.Distinct(t, bArray)
    local check = {}
    local n = {}
    local idx = 1
    for k, v in pairs(t) do
        if not check[v] then
            if bArray then
                n[idx] = v
                idx = idx + 1
            else
                n[k] = v
            end
            check[v] = true
        end
    end
    return n
end

---判断一个table 是不是 空的
---@param table table
---@return boolean
function table.IsEmpty(table)
    return not next(table)
end

---反转table
---@generic V
---@param array V[]
---@return V[]
function table.Reverse(array)
    local var = {}
    for i = 1, #array do
        var[i] = table.remove(array)
    end
    return var
end

---交换俩个元素
---@param array table
---@param i any
---@param j any
function table.Swap(array, i, j)
    if i and j and not table.IsEmpty(array) then
        local tmp = array[i]
        array[i] = array[j]
        array[j] = tmp
    end
end

function table.IndexOf(tab, entity)
    for i, v in pairs(tab) do
        if entity == v then
            return i
        end
    end
end

---多条件排序 第一个条件无法判断就判断后一个
---@generic V
---@param list V[]
---@param ... fun(a:V, b:V):number 比较下一个0 ;成立 1;不成立-1
function table.Sort(list, ...)
    local args = { ... }
    if table.IsEmpty(args) then
        return
    end
    local compare = function(a, b)
        for _, confition in ipairs(args) do
            local _result = confition(a, b)
            if _result > 0 then
                return true
            elseif _result < 0 then
                return false
            end
        end
        return false
    end
    table.sort(list, compare)
end

---转化一个table
---@generic K
---@generic V
---@generic Convert
---@param tab table<K,V>
---@param func fun(a:V):Convert
---@param return_dic boolean
---@return table<K,Convert>|Convert[]
function table.Convert(tab, func, return_dic)
    local result = {}
    for key, value in pairs(tab) do
        local convert = func(value)
        if return_dic then
            result[key] = convert
        else
            table.insert(result, convert)
        end
    end
    return result
end

------------------------------------------------------------------------------

---@class UnitType 元对象类型枚举
UnitType = {
    Unit     = "Unit",
    Type     = "Type",
    Instance = "Instance"
}

---@class ClassType class类型
ClassType = {
    Lua              = 0, ---纯Lua
    CreateFirst      = 1, --需要先调用__createfirst创建实例对象
    ExtendCSInstance = 2  --扩展CSharp实例
}

---@class Unit
Unit = {
    ---@type UnitType 元类型
    __unitType    = UnitType.Unit,
    ---@type Unit 基类型                    __unittype = UnitType.Type 存在
    __super       = nil,
    ---@type string 类型名称                __unittype = UnitType.Type 存在
    __className   = "Unit",
    ---@type ClassType 类型种类             __unittype = UnitType.Type 存在
    __classType   = nil,
    ---@type Unit 所属类型 ，是一个 {}       __unittype == UnitType.Instance 存在
    __type        = nil,
    ---@private
    ---@type userdata CS 对象               __classtype = ClassType.ExtendCSInstance|ClassType.CreateFirst存在
    __object      = nil,
    ---@private
    ---@type function 创建CS实例             __classtype = ClassType.CreateFirst &&  __unittype = UnitType.Type存在
    __firstCreate = nil,
    ---@private
    ---@type  function 构造函数 自动调用
    ctor          = nil
}

---@param super string|Unit 名字或者一张由 class 创建出的表
---@return boolean
function Unit:IsSubClassOf(super)
    --- @type Unit
    local _type
    --- @type string
    local className
    _type     = self.__unitType == UnitType.Instance and self.__type or self
    className = type(super) == LuaDataType.String and super or super.__className
    local tmp = _type
    while tmp ~= nil do
        if tmp.__className == className then return true end
        tmp = tmp.__super
    end
    return false
end

---@param instance Unit
---@param type Unit
local function CopySuper(instance, type)
    local tmp    = type
    local supers = {}
    while tmp ~= nil do
        table.insert(supers, 1, tmp)
        tmp = tmp.__super
    end
    for keysuper, superItem in pairs(supers) do
        for k, v in pairs(superItem) do
            if k ~= "__firstCreate" and k ~= "__unitType" then
                instance[k] = v
            end
        end
    end
    supers = nil
    return instance
end

---@param instance Unit
local function ExtendCSInstance(instance)
    instance.__unitType = UnitType.Instance
    local meta = {}
    meta.__call = function(_, ...) error(_.__className .. " is a instance extend from cs instance ") end
    meta.__index = function(_t, k)
        local selffield = rawget(_t, k)
        if selffield then
            return selffield
        else
            local fromcs = _t.__object[k]
            if type(fromcs) == LuaDataType.Function then
                return function(...)
                    local args = { ... }
                    if not table.IsEmpty(args) then
                        local first = args[1]
                        table.remove(args, 1)
                    end
                    fromcs(_t.__object, table.unpack(args))
                end
            else
                return fromcs
            end
        end
    end
    meta.__newindex = function(_t, k, v)
        local valuetype = type(v)
        if valuetype == LuaDataType.Function then
            rawset(_t, k, v)
        else
            if _t.__object[k] then
                _t.__object[k] = v
            else
                rawset(_t, k, v)
            end
        end
    end
    setmetatable(instance, meta)
    return instance
end

local function CallCtor(instance, type, ...)
    local ctorTable = {}
    local tmp = type
    while tmp ~= nil do
        table.insert(ctorTable, 1, tmp)
        tmp = tmp.__super
    end
    for k, v in pairs(ctorTable) do
        local ctor = rawget(v, "ctor")
        if ctor then
            ctor(instance, ...)
        end
    end
    ctorTable = nil
    return instance
end

---创建一个类
---@generic T:Unit
---@param className string  类名
---@param super Unit|userdata|nil 父类
---@return T
class = function(className, super)
    assert(type(className) == LuaDataType.String and #className > 0)
    ---@type Unit
    local unitType
    local superType      = type(super)
    local isCSType       = super and superType == LuaDataType.Table and typeof(super)                  --判断是否是C#类
    local isCSInstance   = super and superType == LuaDataType.UserData                                 --判断是否为C#实例
    local isExCSInsAgain = super and super.__classType == ClassType.ExtendCSInstance                   --再次扩展C#实例
    if isExCSInsAgain then error('cannot extends a c# instance multiple times.') end
    local isFirstExCSType  = isCSType and (not super.__classType) or superType == LuaDataType.Function --首次继承C#类
    local isExCSTypeAgain  = super and super.__classType == ClassType.CreateFirst                      --再次扩展C#类
    unitType               = {}
    unitType.__className   = className
    unitType.__type        = Unit
    unitType.__unitType    = isCSInstance and UnitType.Instance or UnitType.Type
    unitType.__object      = isCSInstance and super or nil
    unitType.ctor          = unitType.ctor or function(...) end
    unitType.__classType   = (isCSInstance and ClassType.ExtendCSInstance) or
        ((isFirstExCSType or isExCSTypeAgain) and ClassType.CreateFirst) or ClassType.Lua
    unitType.__super       = ((isCSInstance or isFirstExCSType) and Unit) or
        (isExCSTypeAgain and super) or (super == nil and Unit or super)
    unitType.__firstCreate = (isExCSTypeAgain and super.__firstCreate) or
        ((isCSType and not super.__classType) and function(...) return super(...) end) or
        ((superType == LuaDataType.Function) and super) or nil
    if isCSInstance then return ExtendCSInstance(unitType) end
    local meta   = {}
    meta.__index = super == nil and Unit or super
    local __call
    if isFirstExCSType or isExCSTypeAgain then
        __call = function(_type, ...)
            local instance    = {}
            instance.__type   = _type
            instance.__object = _type.__firstcreate(...)
            return CallCtor(CopySuper(ExtendCSInstance(instance), _type), _type, ...)
        end
    else
        __call = function(_type, ...)
            local instance        = {}
            instance.__unittype   = UnitType.Instance
            instance.__type       = _type
            local instance_meta   = {}
            instance_meta.__index = _type
            instance_meta.__call  = function(_, ...) error("this is a Instance of " .. _.__classname) end
            setmetatable(instance, instance_meta)
            return CallCtor(instance, _type, ...)
        end
    end
    meta.__call = __call
    setmetatable(unitType, meta)
    return unitType
end
------------------------------------------------------------------------------







-- 生成方法句柄
--- @param method function 类型名称
--- @return function
function Handler(method, ...)
    local args = { ... }
    if table.IsEmpty(args) then
        return function(...)
            return method(...)
        end
    else
        return function(...)
            local args2 = { ... }
            if table.IsEmpty(args2) then
                return method(table.unpack(args))
            else
                for i = #args, 1, -1 do
                    table.insert(args2, 1, args[i])
                end
                return method(table.unpack(args2))
            end
        end
    end
end

---@class TryBlock
---@field main function
---@field catch function
---@field finally function
---C# try
---@param block TryBlock
function try(block)
    local main = block[1]
    local catch = block.catch
    local finally = block.finally

    local results = table.pack(pcall(main))
    local status = results[1]
    local e = results[2]
    table.remove(results, 1)
    local result = results
    local catched = false
    if (not status) and catch and type(catch) == LuaDataType.Function then
        catched = true
        local results = table.pack(pcall(catch, e))
        if results[1] then
            table.remove(results, 1)
            result = results
            e = nil
        else
            e = results[2]
        end
    end

    if finally and type(finally) == LuaDataType.Function then
        pcall(finally)
    end

    if status then
        return table.unpack(result)
    elseif catched then
        if not e then
            return table.unpack(result)
        else
            error(e)
        end
    else
        error(e)
    end
end

---锁住 _G
function Lock_G()
    if _G.__locked then return end
    local meta = {}
    meta.__newindex = function(_, k, v) error("attempt to add a new value to global,key: " .. k, 2) end
    -- meta.__index = function(_, k)
    --     return rawget(_, k) or rawget(_.UsingStaticTable, k)
    -- end
    _G.__locked = true
    setmetatable(_G, meta)
end

_G.UsingStaticTable = {}
-- C# 调用方法
-- local KeyCode= Using("UnityEngine.KeyCode")
-- print(KeyCode.Space)
--- @param classname string 类型名称
--- @return any
function StaticUsing(classname)
    local _target = rawget(_G.UsingStaticTable, classname)
    if _target == nil then
        _target = load("return CS." .. classname)()
        rawset(_G.UsingStaticTable, classname, _target)
    end
    return _target
end
